{"version":3,"sources":["components/Chart/Chart.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Cards/Cards.module.css","App.module.css","components/CountryPicker/CountryPicker.module.css","images/logo.png"],"names":["module","exports","Cards","data","country","Global","index","key","Countries","Country","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","confirmed","CardContent","Typography","color","gutterBottom","variant","start","end","TotalConfirmed","duration","separator","Date","toDateString","varient","recovered","TotalRecovered","deaths","TotalDeaths","NewConfirmed","NewRecovered","NewDeaths","url2","fetchData","a","axios","get","response","console","log","window","location","reload","fetchCountryData","modifiedData","map","dailyData","Confirmed","Deaths","date","Recovered","active","Active","fetchDailyData","url","total","reportDate","fetchCountries","Chart","countryData","useState","setDailyData","useEffect","fetchAPI","lineChartConfirmed","length","labels","datasets","label","borderColor","fill","options","title","display","text","lineChartDeath","backgroundColor","countryLineChartConfirmed","countryLineChartDeath","countryLineChartRecovered","countryLineChartActive","countryLineChartVersus","lineChartVersus","barChart","legend","countryBarChart","charts","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultChecked","onChange","e","target","value","sort","i","App","state","responseData","setState","this","src","Image","image","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8f151d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2_PEJ\",\"charts\":\"Chart_charts__25hRK\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\nconst  Cards = (data, country) =>{ \r\n    \r\n    if(!data.data.Global){\r\n        return \"Loading...\";\r\n    }else if(data.country){\r\n        var index;\r\n        for(var key in data.data.Countries){\r\n            if(data.data.Countries[key].Country === data.country){\r\n                index = key;\r\n            }\r\n        }        \r\n        return(   \r\n            <div className={styles.container}>\r\n                <Grid container spacing={3} justify=\"center\">\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.confirmed)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>Total Confirmed Cases</Typography>\r\n                            <Typography variant=\"h5\">\r\n                                <CountUp start={0} end={data.data.Countries[index].TotalConfirmed} duration={2} separator=\",\"/>\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">{new Date().toDateString()}</Typography>\r\n                            <Typography varient=\"body2\">Total Number of active cases of COVID-19</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n    \r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>Total Recovered Cases</Typography>\r\n                            <Typography variant=\"h5\">\r\n                                <CountUp start={0} end={data.data.Countries[index].TotalRecovered} duration={2} separator=\",\"/>\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">{new Date().toDateString()}</Typography>\r\n                            <Typography varient=\"body2\">Total Number of recovered cases of COVID-19</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n    \r\n                    <Grid item component={Card}  xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>Total Deaths</Typography>\r\n                            <Typography variant=\"h5\">\r\n                                <CountUp start={0} end={data.data.Countries[index].TotalDeaths} duration={2} separator=\",\"/>\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">{new Date().toDateString()}</Typography>\r\n                            <Typography varient=\"body2\">Total Number of deaths caused by COVID-19</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n    \r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.confirmed)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>New Confirmed Cases</Typography>\r\n                            <Typography variant=\"h5\">\r\n                                <CountUp start={0} end={data.data.Countries[index].NewConfirmed} duration={2} separator=\",\"/>\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">{new Date(data.data.Countries[index].Date).toDateString()}</Typography>\r\n                            <Typography varient=\"body2\">Latest confirmed cases of COVID-19</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n    \r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>New Recovered Cases</Typography>\r\n                            <Typography variant=\"h5\">\r\n                                <CountUp start={0} end={data.data.Countries[index].NewRecovered} duration={2} separator=\",\"/>\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">{new Date(data.data.Countries[index].Date).toDateString()}</Typography>\r\n                            <Typography varient=\"body2\">Latest recovered cases of COVID-19</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n    \r\n                    <Grid item component={Card}  xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                            <Typography variant=\"h5\">\r\n                                <CountUp start={0} end={data.data.Countries[index].NewDeaths} duration={2} separator=\",\"/>\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">{new Date(data.data.Countries[index].Date).toDateString()}</Typography>\r\n                            <Typography varient=\"body2\">Latest deaths caused by COVID-19</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.confirmed)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Total Confirmed Cases</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={data.data.Global.TotalConfirmed} duration={2} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date().toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">Total Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Total Recovered Cases</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={data.data.Global.TotalRecovered} duration={2} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date().toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">Total Number of recovered cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card}  xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Total Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={data.data.Global.TotalDeaths} duration={2} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date().toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">Total Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.confirmed)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>New Confirmed Cases</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={data.data.Global.NewConfirmed} duration={2} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date().toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">Latest confirmed cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>New Recovered Cases</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={data.data.Global.NewRecovered} duration={2} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date().toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">Latest recovered cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card}  xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={data.data.Global.NewDeaths} duration={2} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date().toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">Latest deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","/*\r\nThis file fetchs data from two different apis:\r\n1. https://covid19.mathdro.id/api\r\n2. https://api.covid19api.com\r\n*/\r\n\r\nimport axios from 'axios';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\nconst url2 = \"https://api.covid19api.com\";\r\n\r\n//fetchs data from url2\r\nexport const fetchData = async() => {\r\n    try {\r\n        const response = await axios.get(url2+\"/summary\");\r\n        return response;\r\n    } catch (error) {\r\n        console.log(error);\r\n        window.location.reload();\r\n    }\r\n}\r\n\r\n//fetchs data from url2 for specific countries\r\nexport const fetchCountryData = async(country) => {\r\n    try {\r\n        const { data } = await axios.get(url2+\"/country/\"+country);\r\n        \r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.Confirmed,\r\n            deaths: dailyData.Deaths,\r\n            date: dailyData.Date,\r\n            recovered: dailyData.Recovered, \r\n            active: dailyData.Active\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n        window.location.reload();\r\n    }\r\n}\r\n\r\n//fetchs daily data from url1 to show on line chart\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(url+\"/daily\");\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n        window.location.reload();\r\n    }\r\n}\r\n\r\n//Fetchs countru names to show on country picker\r\nexport const fetchCountries = async() => {\r\n    try {\r\n        const response = await axios.get(url2+\"/summary\");\r\n        \r\n        return response.data.Countries.map((country) => country.Country);\r\n    } catch (error) {\r\n        console.log(error);\r\n        window.location.reload();\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\nconst  Chart = ({ data, country, countryData }) =>{\r\n    const [dailyData, setDailyData] = useState([]); \r\n    \r\n    useEffect(()=>{\r\n        const fetchAPI = async() => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    },[]);\r\n    const lineChartConfirmed = (\r\n        dailyData.length\r\n        ?(\r\n            <Line\r\n            data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: \"#3333ff\",\r\n                    fill: true,\r\n                }],\r\n                }}\r\n                options={{\r\n                    title: {display: true, text: \"Daily Cases\"}\r\n                }}\r\n            />) : null\r\n        \r\n    );\r\n    const lineChartDeath = (\r\n        \r\n        dailyData.length\r\n        ?(\r\n            <Line\r\n            data={{\r\n                \r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ deaths }) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: \"red\",\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                }],\r\n                }}\r\n                options={{\r\n                    title: {display: true, text: \"Daily Deaths\"}\r\n                }}\r\n            />) : null\r\n        \r\n    );\r\n  \r\n    const countryLineChartConfirmed = (\r\n        countryData.length\r\n        ?(\r\n            <Line\r\n            data={{\r\n                labels: countryData.map(({ date }) => new Date(date).toDateString()),\r\n                datasets: [{\r\n                    data: countryData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: \"#3333ff\",\r\n                    fill: true,\r\n                }],\r\n                }}\r\n                options={{\r\n                    title: {display: true, text: \"Daily Cases in \"+country}\r\n                }}\r\n            />) : null\r\n        \r\n    );  \r\n\r\n    const countryLineChartDeath = (\r\n        countryData.length\r\n        ?(\r\n            <Line\r\n            data={{\r\n                labels: countryData.map(({ date }) => new Date(date).toDateString()),\r\n                datasets: [{\r\n                    data: countryData.map(({ deaths }) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: \"red\",\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                }],\r\n                }}\r\n                options={{\r\n                    title: {display: true, text: \"Daily Deaths in \"+country}\r\n                }}\r\n            />) : null\r\n        \r\n    );\r\n    \r\n    const countryLineChartRecovered = (\r\n        countryData.length\r\n        ?(\r\n            <Line\r\n            data={{\r\n                labels: countryData.map(({ date }) => new Date(date).toDateString()),\r\n                datasets: [{\r\n                    data: countryData.map(({ recovered }) => recovered),\r\n                    label: 'Recovered',\r\n                    borderColor: \"green\",\r\n                    backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n                    fill: true,\r\n                }],\r\n                }}\r\n                options={{\r\n                    title: {display: true, text: \"Daily Recoveries in \"+country}\r\n                }}\r\n            />) : null\r\n        \r\n    );\r\n\r\n    const countryLineChartActive = (\r\n        countryData.length\r\n        ?(\r\n            <Line\r\n            data={{\r\n                labels: countryData.map(({ date }) => new Date(date).toDateString()),\r\n                datasets: [{\r\n                    data: countryData.map(({ active }) => active),\r\n                    label: 'Active Cases',\r\n                    borderColor: \"#33eeff\",\r\n                    fill: true,\r\n                }],\r\n                }}\r\n                options={{\r\n                    title: {display: true, text: \"Daily Active Cases in \"+country}\r\n                }}\r\n            />) : null\r\n        \r\n    );\r\n\r\n\r\n    const countryLineChartVersus = (\r\n        countryData.length\r\n        ?(\r\n            <Line\r\n            data={{\r\n                labels: countryData.map(({ date }) => new Date(date).toDateString()),\r\n                datasets: [{\r\n                    data: countryData.map(({ recovered }) => recovered),\r\n                    label: 'Recovered',\r\n                    borderColor: \"green\",\r\n                    backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n                    fill: true,\r\n                },{\r\n                    data: countryData.map(({ deaths }) => deaths),\r\n                    label: 'deaths',\r\n                    borderColor: \"red\",\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                },{\r\n                    data: countryData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: \"#3333ff\",\r\n                    fill: true,\r\n                }],\r\n                }}\r\n                options={{\r\n                    title: {display: true, text: \"Daily states in \"+country}\r\n                }}\r\n            />) : null\r\n        \r\n    );\r\n\r\n    const lineChartVersus = (\r\n        dailyData.length\r\n        ?(\r\n            <Line\r\n            data={{\r\n                labels: dailyData.map(({ date }) => new Date(date).toDateString()),\r\n                datasets: [{\r\n                    data: dailyData.map(({ deaths }) => deaths),\r\n                    label: 'deaths',\r\n                    borderColor: \"red\",\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                },{\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: \"#3333ff\",\r\n                    fill: true,\r\n                }],\r\n                }}\r\n                options={{\r\n                    title: {display: true, text: \"Daily states\"}\r\n                }}\r\n            />) : null\r\n        \r\n    );\r\n    const barChart = (\r\n        data.Global\r\n        ?(\r\n            <Bar\r\n                \r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)',\r\n                        ],\r\n                        data:[data.Global.TotalConfirmed, data.Global.TotalRecovered, data.Global.TotalDeaths]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: {display: false},\r\n                    title: {display: true, text: \"Current state\"}\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    const countryBarChart = (\r\n        countryData.length\r\n        ?(\r\n            <Bar\r\n                \r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths', 'Active'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)',\r\n                            '#33eeff'\r\n                        ],\r\n                        data:[countryData[countryData.length - 1].confirmed, countryData[countryData.length - 1].recovered, countryData[countryData.length - 1].deaths, countryData[countryData.length - 1].active]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: {display: false},\r\n                    title: {display: true, text: \"Current state in \"+country}\r\n                }}\r\n            />\r\n        ) : null\r\n    )\r\n    \r\n    return(\r\n        <div className={styles.container}>\r\n            <div className={styles.charts}>\r\n                {country ? countryLineChartVersus : lineChartVersus}\r\n            </div>\r\n            <div className={styles.charts}>\r\n                {country ? countryLineChartConfirmed : lineChartConfirmed}\r\n            </div>\r\n            <div className={styles.charts}>\r\n                {country ? countryLineChartDeath : lineChartDeath}\r\n            </div>\r\n            <div className={styles.charts}>\r\n                {country ? countryLineChartRecovered : \"\"}\r\n            </div>\r\n            <div className={styles.charts}>\r\n                {country ? countryLineChartActive : \"\"}\r\n            </div>\r\n            <div className={styles.charts}>\r\n                {country ? countryBarChart : barChart}\r\n            </div>\r\n            \r\n            \r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl} from '@material-ui/core';\r\nimport { fetchCountries } from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst  CountryPicker = ({ handleCountryChange }) =>{\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n\r\n    return(\r\n    \r\n       <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultChecked=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Globle</option>\r\n                {(fetchedCountries.sort()).map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport Cards from './components/Cards/Cards';\r\nimport Chart from './components/Chart/Chart';\r\nimport CountryPicker from './components/CountryPicker/CountryPicker';\r\nimport { fetchData, fetchCountryData } from './api'\r\nimport Image from './images/logo.png';\r\nimport styles from './App.module.css';\r\n\r\nclass App extends React.Component{\r\n    state = {\r\n        countryData: {},\r\n        data: {},\r\n        country: '',\r\n    }\r\n    async componentDidMount(){\r\n        const data = await fetchData();\r\n        this.setState({data: data.data});\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        if(country){\r\n            const responseData = await fetchCountryData(country);\r\n            this.setState({countryData: responseData});\r\n            this.setState({country: country});\r\n        }else{\r\n            const data = await fetchData();\r\n            this.setState({data: data.data});\r\n            this.setState({country: ''})\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className={styles.container}>\r\n                <img src={Image} className={styles.image} alt=\"logo\"/>\r\n                <Cards data={this.state.data} country={this.state.country}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={this.state.data} country={this.state.country}  countryData={this.state.countryData}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__IF0fK\",\"card\":\"Cards_card__3bRNS\",\"confirmed\":\"Cards_confirmed__3kFky\",\"recovered\":\"Cards_recovered__BLx26\",\"deaths\":\"Cards_deaths__2crno\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__pydl1\",\"image\":\"App_image__2YkPj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1HtWR\"};","module.exports = __webpack_public_path__ + \"static/media/logo.522dd832.png\";"],"sourceRoot":""}